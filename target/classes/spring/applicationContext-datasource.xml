<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
					    http://www.springframework.org/schema/beans/spring-beans.xsd
					    http://www.springframework.org/schema/tx
					    http://www.springframework.org/schema/tx/spring-tx.xsd
					    http://www.springframework.org/schema/aop
					    http://www.springframework.org/schema/aop/spring-aop.xsd
					    http://www.springframework.org/schema/context
					    http://www.springframework.org/schema/context/spring-context.xsd
					    " default-autowire="byName">
	<!-- 数据库基本信息 -->
	<bean id="dataSource"
		class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="com.mysql.cj.jdbc.Driver" />
		<property name="url" value="jdbc:mysql:///bs-blog?useSSL=false&amp;serverTimezone=UTC&amp;allowMultiQueries=true"></property>
		<property name="username" value="root"></property>
		<property name="password" value="你的数据库密码"></property>
		
		<!-- 初始化大小,初始化时建立物理连接的个数,初始化发生在显式调用init方法或第一个调用getConnention时 --> 
		<property name="initialSize" value="1" />

		<!-- 最小连接池数量 -->
		<property name="minIdle" value="1" />

		<!-- 最大连接池数量 -->
		<property name="maxActive" value="200" />

		<!-- 获取连接时最大的等待时间,单位毫秒 -->
		<property name="maxWait" value="10000" />

		<!-- 间隔多久进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --> 
    	<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 一个连接在池中最小的生存时间，单位是毫秒 --> 
    	<property name="minEvictableIdleTimeMillis" value="300000" />

    	<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效 -->
		<property name="testWhileIdle" value="true" />

		<!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
		<property name="testOnBorrow" value="false" /> 

		<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
    	<property name="testOnReturn" value="false" /> 

		<!-- 用来检测连接是否是有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。 --> 
  		<property name="validationQuery" value="select 1" /> 

  		<!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭  -->
  		<property name="poolPreparedStatements" value="false" />

  		<!-- 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100 -->
  		<!-- <property name="maxOpenPreparedStatements" value="100" /> -->
    	
    	<!-- 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall --> 
    	<property name="filters" value="log4j" />
	</bean>
	
	
	<!-- 配置数据源 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>	
		<!-- mybatis配置文件 -->
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property>	
		<!-- xxxMapper.xml映射文件 -->
		<property name="mapperLocations" value="classpath*:xyz/yuelai/blog/dao/*.xml"></property>
	</bean>
	<!-- DAO包，Spring自动查找其中的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="xyz.yuelai.blog.dao"></property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
	<!-- 事务管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" read-only="false"/>
			<tx:method name="get*" read-only="false"/>
			<tx:method name="delete*" read-only="false"/>
			<tx:method name="update*" read-only="false"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut expression="execution(* xyz.yuelai.blog.service.*.*(..))" id="appService"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="appService"/>
	</aop:config>
	
	<!-- 开启事务注解 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager"/> -->
</beans>